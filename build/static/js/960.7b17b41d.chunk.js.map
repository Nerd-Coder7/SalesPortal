{"version":3,"file":"static/js/960.7b17b41d.chunk.js","mappings":"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","sources":["webpack://my-app/./src/components/summary/Summary.module.scss?2cd9","webpack://my-app/./src/components/summary/SummaryBox.module.scss?74b5","components/summary/SummaryBox.tsx","components/summary/Summary.tsx","components/chart/LineChart.tsx","components/chart/BarChart.tsx","webpack://my-app/./src/components/chart/Chart.module.scss?9244","components/chart/Chart.tsx","pages/Dashboard.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"summary\":\"Summary_summary__XCl7s\",\"summary__box\":\"Summary_summary__box__RgNQ8\"};","// extracted by mini-css-extract-plugin\nexport default {\"summary__box\":\"SummaryBox_summary__box__X1Cem\",\"summary__box__wrapper\":\"SummaryBox_summary__box__wrapper__-uSZv\",\"summary__box__icon\":\"SummaryBox_summary__box__icon__CBfmj\",\"summary__box__info__amount\":\"SummaryBox_summary__box__info__amount__IKXr-\"};","import { Icon } from \"@iconify/react\";\nimport React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { IsummData } from \"../../interfaces/IsummData\";\nimport Card from \"../UI/card/Card\";\nimport classes from \"./SummaryBox.module.scss\";\nconst SummaryBox: React.FC<{ item: IsummData }> = (props) => {\n  const { t } = useTranslation();\n  return (\n    <div className={classes.summary__box}>\n      <Card>\n        <div className={classes.summary__box__wrapper}>\n          <div className={classes.summary__box__icon}>\n            <Icon icon={props.item.icon} width=\"56\" />\n          </div>\n          <div className={classes.summary__box__info}>\n            <p>{t(props.item.text)}</p>\n            <div className={classes.summary__box__info__amount}>\n              <h4>{props.item.amount}</h4>\n              <sup>{t(props.item.currency)}</sup>\n            </div>\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n};\n\nexport default SummaryBox;\n","import { useTranslation } from \"react-i18next\";\nimport useDataFetch from \"../../hook/useDataFetch\";\nimport { MonthlyStats } from \"../../interfaces/IsummData\";\nimport classes from \"./Summary.module.scss\";\nimport SummaryBox from \"./SummaryBox\";\nimport { useContext, useState } from \"react\";\nimport { Button, Flex } from \"@chakra-ui/react\";\nimport LoadingSpinner from \"../UI/loadingSpinner/LoadingSpinner\";\nimport LoginContext from \"../../store/loginContext\";\n\nfunction Summary() {\n  const { t } = useTranslation();\n  const { user } = useContext(LoginContext);\n  const [count, setCount] = useState(0);\n  const MonthlyStatsUrl =\n    user.role === \"admin\"\n      ? `${process.env.REACT_APP_API_URL}/api/portal/stats`\n      : `${process.env.REACT_APP_API_URL}/api/portal/stats?id=${user._id}`;\n\n  const { data, error, loading } = useDataFetch<MonthlyStats>(MonthlyStatsUrl);\n\n  // Check if data exists before destructure\n  const { monthly, allTime, currentYear } = data || {};\n\n  const monthlyConnects = {\n    icon: \"arcticons:connect\",\n    text:\n      count === 0\n        ? \"thisMonthConnects\"\n        : count === 0\n        ? \"thisYearConnects\"\n        : \"thisTotalConnects\",\n    amount:\n      count === 0\n        ? monthly?.totalConnects || 0\n        : count === 1\n        ? currentYear?.totalConnects || 0\n        : allTime?.totalConnects || 0,\n    currency: \"\",\n  };\n\n  const monthlySales = {\n    // icon: \"icon-park-outline:transaction-order\",\n    icon: \"carbon:sales-ops\",\n    text:\n      count === 0\n        ? \"thisMonthRevenue\"\n        : count === 1\n        ? \"thisYearRevenue\"\n        : \"thisTotalRevenue\",\n    amount:\n      count === 0\n        ? monthly?.totalSales || 0\n        : count === 1\n        ? currentYear?.totalSales || 0\n        : allTime?.totalSales || 0,\n    currency: \"\",\n  };\n\n  const monthlyConnectsCost = {\n    // icon: \"jam:coin\",\n    icon: \"nimbus:money\",\n    // icon: \"arcticons:connect\",\n    text:\n      count === 0\n        ? \"thisMonthUsedMoneyOnConnects\"\n        : count === 1\n        ? \"thisYearUsedMoneyOnConnects\"\n        : \"thisTotalUsedMoneyOnConnects\",\n    amount:\n      count === 0\n        ? monthly?.totalMoneyUsedOnConnects || 0\n        : count === 1\n        ? currentYear?.totalMoneyUsedOnConnects || 0\n        : allTime?.totalMoneyUsedOnConnects || 0,\n    currency: \"\",\n  };\n\n  const monthlyProposals = {\n    icon: \"icon-park-outline:transaction-order\",\n    text:\n      count === 0\n        ? \"thisMonthProposals\"\n        : count === 1\n        ? \"thisYearProposals\"\n        : \"thisTotalProposals\",\n    amount:\n      count === 0\n        ? monthly?.totalProposals || 0\n        : count === 1\n        ? currentYear?.totalProposals || 0\n        : allTime?.totalProposals || 0,\n    currency: \"\",\n  };\n\n  const monthlyAmount = {\n    // icon: \"akar-icons:shopping-bag\",\n    icon: \"tdesign:money\",\n    text:\n      count === 0\n        ? \"thisMonthRecievedAmount\"\n        : count === 1\n        ? \"thisYearRecievedAmount\"\n        : \"thisTotalRecievedAmount\",\n    amount:\n      count === 0\n        ? monthly?.totalReceivedAmount || 0\n        : count === 1\n        ? currentYear?.totalReceivedAmount || 0\n        : allTime?.totalReceivedAmount || 0,\n    currency: \"\",\n  };\n\n  return (\n    <>\n      {loading ? (\n        <LoadingSpinner />\n      ) : (\n        <section className={classes.summary}>\n          <Flex justifyContent={\"space-between\"} alignItems={\"center\"}>\n            <p className=\"subTitle\">{t(\"summary\")}</p>\n            <Flex gap={\"10px\"}>\n              {\" \"}\n              <Button\n                colorScheme={count === 0 ? \"red\" : \"gray\"}\n                onClick={() => setCount(0)}\n              >\n                Monthly\n              </Button>\n              <Button\n                colorScheme={count === 1 ? \"red\" : \"gray\"}\n                onClick={() => setCount(1)}\n              >\n                Yearly\n              </Button>\n              <Button\n                colorScheme={count === 2 ? \"red\" : \"gray\"}\n                onClick={() => setCount(2)}\n              >\n                Total\n              </Button>\n            </Flex>\n          </Flex>\n          <div className={classes.summary__box}>\n            {/* Render the SummaryBox only if data is available */}\n            {data && (\n              <>\n                <SummaryBox\n                  key={monthlyProposals.text}\n                  item={monthlyProposals}\n                />\n                <SummaryBox key={monthlyConnects.text} item={monthlyConnects} />\n                <SummaryBox key={monthlySales.text} item={monthlySales} />\n                <SummaryBox\n                  key={monthlyConnectsCost.text}\n                  item={monthlyConnectsCost}\n                />\n                <SummaryBox key={monthlyAmount.text} item={monthlyAmount} />\n              </>\n            )}\n          </div>\n        </section>\n      )}\n    </>\n  );\n}\n\nexport default Summary;\n","import React from \"react\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\nimport { Line } from \"react-chartjs-2\";\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Tooltip,\n  Legend\n);\n\nexport const options = {\n  responsive: true,\n  plugins: {\n    legend: {\n      // rtl: true,\n      // textDirection: \"rtl\",\n      labels: {\n        font: {\n          size: 20,\n          color: \"#fff\",\n        },\n      },\n    },\n  },\n};\n\ninterface Props {\n  labels: string[];\n  datasets: {\n    label: string;\n    data: number[];\n    borderColor: string;\n    backgroundColor: string;\n  }[];\n}\nconst LineChart: React.FC<{ chartData: Props }> = (props) => {\n  return <Line data={props.chartData} options={options} />;\n};\n\nexport default LineChart;\n","import React, { useMemo } from \"react\";\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\nimport { Bar } from \"react-chartjs-2\";\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\ninterface IChartData {\n  labels: string[];\n  datasets: {\n    label: string;\n    data: number[];\n    backgroundColor: string;\n  }[];\n}\n\nconst BarChart: React.FC<{ chartData: IChartData; chartTitle: string }> = (\n  props\n) => {\n  const { chartTitle } = props;\n  const options = useMemo(\n    () => ({\n      responsive: true,\n      plugins: {\n        legend: {\n          position: \"center\" as const,\n        },\n        title: {\n          display: true,\n          text: chartTitle,\n        },\n      },\n    }),\n    [chartTitle]\n  );\n  return <Bar options={options} data={props.chartData} />;\n};\n\nexport default BarChart;\n","// extracted by mini-css-extract-plugin\nexport default {\"chart\":\"Chart_chart__IPerA\",\"chart__wrapper\":\"Chart_chart__wrapper__w7kA-\",\"charts__container\":\"Chart_charts__container__sVg+X\",\"charts__wrapper\":\"Chart_charts__wrapper__48IXm\"};","import React, { useState } from \"react\";\nimport { faker } from \"@faker-js/faker\";\n\nimport { useTranslation } from \"react-i18next\";\nimport LineChart from \"./LineChart\";\nimport BarChart from \"./BarChart\";\nimport classes from \"./Chart.module.scss\";\nimport data from \"../../constants/data\";\nimport Card from \"../UI/card/Card\";\n\nconst SaleChart = () => {\n  const { t } = useTranslation();\n  const labels = data.revenueByMonths.labels.map((month) => t(month));\n  const [userData] = useState({\n    labels,\n    datasets: [\n      {\n        label: t(\"summaryOfSale\"),\n        data: data.revenueByMonths.data,\n        borderColor: \"#ee384e\",\n        backgroundColor: \"#3c4b6d\",\n      },\n    ],\n  });\n\n  const [orderData] = useState({\n    labels,\n    datasets: [\n      {\n        label: t(\"summaryOfOrders\"),\n        data: labels.map(() => faker.datatype.number({ min: 0, max: 1000 })),\n        backgroundColor: \"rgba(255, 99, 132, 0.5)\",\n      },\n    ],\n  });\n\n  const [revenueData] = useState({\n    labels,\n    datasets: [\n      {\n        label: t(\"summaryOfRevenue\"),\n        data: labels.map(() => faker.datatype.number({ min: 0, max: 1000 })),\n        backgroundColor: \"rgba(255, 99, 132, 0.5)\",\n      },\n    ],\n  });\n\n  return (\n    <section className={classes.chart}>\n      <p className=\"subTitle\">{t(\"quickAnalysis\")}</p>\n      <div className={classes.charts__container}>\n        <div className={classes.charts__wrapper}>\n          <Card>\n            <div className={classes.chart__wrapper}>\n              <BarChart\n                chartData={orderData}\n                chartTitle={`${t(\"summaryOfOrders\")}`}\n              />\n            </div>\n          </Card>\n          <Card>\n            <div className={classes.chart__wrapper}>\n              <BarChart\n                chartData={revenueData}\n                chartTitle={`${t(\"summaryOfRevenue\")}`}\n              />\n            </div>\n          </Card>\n        </div>\n        <Card>\n          <div className={classes.chart__wrapper}>\n            <LineChart chartData={userData} />\n          </div>\n        </Card>\n      </div>\n    </section>\n  );\n};\n\nexport default SaleChart;\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport Summary from \"../components/summary/Summary\";\nimport SaleChart from \"../components/chart/Chart\";\nimport DashboardTables from \"../components/tables/DashboardTables\";\n\nfunction Dashboard() {\n  const { t } = useTranslation();\n  return (\n    <section>\n      <h2 className=\"title\">{t(\"dashboard\")}</h2>\n      <Summary />\n      <SaleChart />\n      {/* <DashboardTables /> */}\n    </section>\n  );\n}\n\nexport default Dashboard;\n"],"names":["props","t","useTranslation","_jsx","className","classes","summary__box","children","Card","_jsxs","summary__box__wrapper","summary__box__icon","Icon","icon","item","width","summary__box__info","text","summary__box__info__amount","amount","currency","user","useContext","LoginContext","count","setCount","useState","MonthlyStatsUrl","role","concat","process","_id","data","error","loading","useDataFetch","monthly","allTime","currentYear","monthlyConnects","totalConnects","monthlySales","totalSales","monthlyConnectsCost","totalMoneyUsedOnConnects","monthlyProposals","totalProposals","monthlyAmount","totalReceivedAmount","_Fragment","LoadingSpinner","Flex","justifyContent","alignItems","gap","Button","colorScheme","onClick","SummaryBox","ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","Tooltip","Legend","options","responsive","plugins","legend","labels","font","size","color","Line","chartData","BarElement","Title","chartTitle","useMemo","position","title","display","Bar","SaleChart","revenueByMonths","map","month","userData","datasets","label","borderColor","backgroundColor","orderData","faker","datatype","number","min","max","revenueData","BarChart","LineChart","Summary"],"sourceRoot":""}